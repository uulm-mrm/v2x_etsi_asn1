cmake_minimum_required(VERSION 3.10)
project(v2x_etsi_asn1_lib)

# Get aduulm cmake macros for coloring, package_version extraction and find_aduulm_package()
find_package(aduulm_cmake_tools REQUIRED)
get_version_string_from_package_xml(.)
show_build_info("library")
setup_git_hooks()

find_aduulm_package(aduulm_logger_lib REQUIRED)
find_aduulm_package(v2x_amqp_connector_lib REQUIRED)
find_package(date REQUIRED)

set(INCLUDE_INSTALL_DIR include/ CACHE STRING "Path to installed include directory")
set(LIB_INSTALL_DIR lib/ CACHE STRING "Path to installed lib directory")
set(BIN_INSTALL_DIR bin/ CACHE STRING "Path to installed bin directory")

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules")
find_package(ASN1C 0.9.29 REQUIRED MODULE)
set(ASN1C_FLAGS "-fcompound-names -fincludes-quoted -no-gen-example" CACHE STRING "asn1c compiler options")
mark_as_advanced(ASN1C_FLAGS)
string(REPLACE " " ";" _asn1c_flags "${ASN1C_FLAGS}")

###########
## ASN.1 ##
###########

set(_include_gen_dir "${CMAKE_CURRENT_BINARY_DIR}/include")
set(_its_asn1_dir "${_include_gen_dir}/${PROJECT_NAME}/its")
set(_support_asn1_dir "${_include_gen_dir}/${PROJECT_NAME}/support")
set(_its_asn1_installed_dir "${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/its")
set(_support_asn1_installed_dir "${INCLUDE_INSTALL_DIR}/${PROJECT_NAME}/support")

set(_its_asn1_source_file "${CMAKE_CURRENT_BINARY_DIR}/asn1c_its_sources.txt")
set(_support_asn1_source_file "${CMAKE_CURRENT_BINARY_DIR}/asn1c_support_sources.txt")

set(_its_asn1_files
  ${PROJECT_SOURCE_DIR}/asn1/CAM-PDU-Descriptions.asn
  ${PROJECT_SOURCE_DIR}/asn1/CPM-OriginatingStationContainers.asn
  ${PROJECT_SOURCE_DIR}/asn1/CPM-PDU-Descriptions.asn
  ${PROJECT_SOURCE_DIR}/asn1/CPM-PerceivedObjectContainer.asn
  ${PROJECT_SOURCE_DIR}/asn1/CPM-PerceptionRegionContainer.asn
  ${PROJECT_SOURCE_DIR}/asn1/CPM-SensorInformationContainer.asn
  ${PROJECT_SOURCE_DIR}/asn1/ETSI-ITS-CDD.asn
  ${PROJECT_SOURCE_DIR}/asn1/motorcyclist-special-container.asn
  ${PROJECT_SOURCE_DIR}/asn1/TS103561_LUKAS_MCM.asn
  ${PROJECT_SOURCE_DIR}/asn1/VAM-PDU-Descriptions.asn
)

execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${_support_asn1_dir})
execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${_its_asn1_dir})

execute_process(COMMAND ${CMAKE_COMMAND} -DDESTINATION=${_support_asn1_dir} -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/copy_asn1c_skeleton.cmake WORKING_DIRECTORY ${ASN1C_SKELETON_DIR})

execute_process(COMMAND ${ASN1C_EXECUTABLE} ${_asn1c_flags} -R -D ${_its_asn1_dir} ${_its_asn1_files} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} RESULT_VARIABLE ERROR OUTPUT_VARIABLE ASN1_STDOUT ERROR_VARIABLE ASN1_STDERR)
if(ERROR)
  message(WARNING "${ASN1_STDERR}")
  message(FATAL_ERROR "ASN1 ITS messages generation failed")
endif()

execute_process(COMMAND ${CMAKE_COMMAND} -DPROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR} -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/patch_asn1c_skeleton.cmake WORKING_DIRECTORY ${_support_asn1_dir})
execute_process(COMMAND ${CMAKE_COMMAND} -DPROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR} -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/patch_asn1c_generated.cmake WORKING_DIRECTORY ${_its_asn1_dir})

execute_process(COMMAND ${CMAKE_COMMAND} -DASN1C_OUTPUT_DIR=${_support_asn1_dir} -DASN1C_SOURCE_FILE=${_support_asn1_source_file} -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/collect_asn1c_sources.cmake WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
execute_process(COMMAND ${CMAKE_COMMAND} -DASN1C_OUTPUT_DIR=${_its_asn1_dir} -DASN1C_SOURCE_FILE=${_its_asn1_source_file} -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/collect_asn1c_sources.cmake WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

file(STRINGS "${_its_asn1_source_file}" ITS_ASN1C_SOURCES REGEX "^[^#]+")
file(STRINGS "${_support_asn1_source_file}" SUPPORT_ASN1C_SOURCES REGEX "^[^#]+")

add_library(asn1 SHARED ${ITS_ASN1C_SOURCES} ${SUPPORT_ASN1C_SOURCES})
target_include_directories(asn1 PUBLIC
  $<BUILD_INTERFACE:${_support_asn1_dir}>
  $<BUILD_INTERFACE:${_its_asn1_dir}>
  $<INSTALL_INTERFACE:${_its_asn1_installed_dir}>
  $<INSTALL_INTERFACE:${_support_asn1_installed_dir}>
)
set_target_properties(asn1 PROPERTIES C_STANDARD 11)
set_source_files_properties(${ITS_ASN1C_SOURCES} PROPERTIES GENERATED true)
set_source_files_properties(${SUPPORT_ASN1C_SOURCES} PROPERTIES GENERATED true)
# Uncomment the following line to debug encoding/decoding errors
# target_compile_definitions(asn1 PRIVATE -DASN_EMIT_DEBUG=1)

# Silence warnings in code generated by asn1c
set_property(SOURCE ${SUPPORT_ASN1C_SOURCES} ${ITS_ASN1C_SOURCES}
  APPEND PROPERTY COMPILE_OPTIONS "-w")

# Replace a missing symbol
execute_process(COMMAND bash -c "find ${_include_gen_dir} -type f -exec sed -i -e 's/\\<SIZE_MAX\\>/ASN_SIZE_MAX_/g' {} \;")

# TARGETS

add_library(${PROJECT_NAME} SHARED
	src/v2x_etsi_asn1_lib.cpp
	src/time_conversions.cpp
	src/logger_setup.cpp
)
add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

target_include_directories(${PROJECT_NAME}
  PUBLIC
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:${INCLUDE_INSTALL_DIR}>
)

# set common target properties
foreach(TARGET ${PROJECT_NAME})
  target_link_libraries(${TARGET}
    PUBLIC
      asn1
      date::date
      date::date-tz
      v2x_amqp_connector_lib::v2x_amqp_connector_lib
  )

  # Link aduulm targets
  link_aduulm_package_targets(TARGET ${TARGET}
    ACCESS PUBLIC
    PACKAGE_TARGETS aduulm_logger_lib::aduulm_logger_lib
  )

  target_compile_features(${TARGET} PUBLIC cxx_std_20)
  target_compile_definitions(${TARGET} PUBLIC "-D${package_name}_VERSION=\"${package_version}\"")
  target_compile_definitions(${TARGET} PRIVATE -DROS_PACKAGE_NAME="${PROJECT_NAME}")
endforeach()


# INSTALLATION (for libraries)
set(PACKAGE_LIBRARY_VERSION ${package_version})

# Create package version file
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    VERSION "${PACKAGE_LIBRARY_VERSION}"
    COMPATIBILITY AnyNewerVersion
)

# Install files for all targets
install(TARGETS ${PROJECT_NAME} asn1 # (add additional targets here)
    EXPORT ${PROJECT_NAME}Targets # store targets in variable
    INCLUDES DESTINATION ${INCLUDE_INSTALL_DIR}
    LIBRARY DESTINATION ${LIB_INSTALL_DIR} COMPONENT Runtime
    ARCHIVE DESTINATION ${LIB_INSTALL_DIR} COMPONENT Development
    RUNTIME DESTINATION ${BIN_INSTALL_DIR} COMPONENT Runtime
    PUBLIC_HEADER DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Development
    BUNDLE DESTINATION ${BIN_INSTALL_DIR} COMPONENT Runtime
)

# Create package config file (to enable find_package())
configure_package_config_file(
    "${PROJECT_SOURCE_DIR}/config.cmake.in" # this file defines the include dirs and libs and may need to be adapted for your package/library
    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    INSTALL_DESTINATION ${LIB_INSTALL_DIR}/cmake/${PROJECT_NAME}
    PATH_VARS INCLUDE_INSTALL_DIR LIB_INSTALL_DIR BIN_INSTALL_DIR
)

# Create targets file with all targets (enables to link against single targets)
install(EXPORT ${PROJECT_NAME}Targets
  DESTINATION ${LIB_INSTALL_DIR}/cmake/${PROJECT_NAME}
  NAMESPACE ${PROJECT_NAME}::
)

# install CMake config and version file
install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
              "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
        DESTINATION ${LIB_INSTALL_DIR}/cmake/${PROJECT_NAME})

# install header files
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION ${INCLUDE_INSTALL_DIR})
install(DIRECTORY ${_include_gen_dir}/ DESTINATION ${INCLUDE_INSTALL_DIR}
    FILES_MATCHING
    PATTERN "*.h"
  )

################
## Unit Tests ##
################
find_package(GTest)

if(${GTEST_FOUND})
  enable_testing()

  # Add source files
  add_executable(${PROJECT_NAME}_test
    test/main_test.cpp
    test/test_time_conversions.cpp
  )

  # Add include directories
  target_include_directories(${PROJECT_NAME}_test
    PUBLIC
    ${GTEST_INCLUDE_DIRS}
  )

  # Compile options
  target_compile_features(${PROJECT_NAME}_test PRIVATE cxx_std_17)

  # Link libraries
  target_link_libraries(${PROJECT_NAME}_test
    PUBLIC
    ${PROJECT_NAME}
    ${GTEST_BOTH_LIBRARIES}
  )

  # Set target build directory
  set_target_properties(${PROJECT_NAME}_test
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/test"
  )

  # Add tests
  add_test(${PROJECT_NAME}_test test/${PROJECT_NAME}_test)

else()
  message(STATUS "GTest not found, skipping unit tests.")
endif()
